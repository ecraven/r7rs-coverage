#!/bin/bash

GUILE=${GUILE:-guile}
CPU_LIMIT=${CPU_LIMIT:-"2"}

case "$1" in
    gerbil) SCHEME_EXE=gerbil_exec
         SCHEME_NAME=gerbil
         SCHEME_VERSION=$(gxi --lang r7rs -e '(import (gerbil/core)) (display (gerbil-system-version-string))' | cut -d\  -f 2)
         ;;

    mit) SCHEME_EXE=mit_scheme_exec
         SCHEME_NAME=mit
         SCHEME_VERSION=$(mit-scheme --version | grep Release | cut -f 4 -d\  )
         ;;
    guile) SCHEME_EXE=guile_exec
           SCHEME_NAME=guile
           SCHEME_VERSION=$(${GUILE} --version | head -n 1 | cut -f 4 -d\   )
           ;;
    chibi) SCHEME_EXE=chibi_exec
           SCHEME_NAME=chibi
           SCHEME_VERSION=$(chibi-scheme  -V | cut -f 2 -d\  )
           ;;
    chez) SCHEME_EXE=chez_exec
           SCHEME_NAME=chez
           SCHEME_VERSION=$(chez-scheme  --version)
           ;;
    chicken) SCHEME_EXE=csi_exec
             SCHEME_NAME=chicken
             SCHEME_VERSION=$(csi -version | grep Version | cut -f 2 -d\   )
             ;;
    larceny) SCHEME_EXE=larceny_exec
             SCHEME_NAME=larceny
             SCHEME_VERSION=$(larceny --version | cut -f 2 -d\  )
             ;;
    kawa) SCHEME_EXE=kawa_exec
          SCHEME_NAME=kawa
          SCHEME_VERSION=$(kawa  --version | head -n 1 | cut -d\  -f 2)
          ;;
    picrin) SCHEME_EXE=picrin_exec
            SCHEME_NAME=picrin
            SCHEME_VERSION="unknown"
            ;;
    gauche) SCHEME_EXE=gauche_exec
            SCHEME_NAME=gauche
            SCHEME_VERSION=$(gosh -V | cut -f 5 -d\  )
            ;;
    racket) SCHEME_EXE=racket_exec
            SCHEME_NAME=racket
            SCHEME_VERSION=$(racket --version | cut -f 4 -d\ | sed 's/\.$//')
            ;;
    cyclone) SCHEME_EXE=cyclone_exec
             SCHEME_NAME=cyclone
             SCHEME_VERSION=$(cyclone -v | grep Version | sed 's/.*Version \([^ ][^ ]*\).*/\1/')
             ;;
    foment) SCHEME_EXE=foment_exec
            SCHEME_NAME=foment
            SCHEME_VERSION=$(foment --version | cut -f 2 -d-)
            ;;
    sagittarius) SCHEME_EXE=sagittarius_exec
                 SCHEME_NAME=sagittarius
                 SCHEME_VERSION=$(sagittarius -v | cut -f 5 -d\ )
            ;;

    *) echo "Unknown Scheme"
       exit -1
       ;;
esac


racket_exec() {
    timeout ${CPU_LIMIT} racket $1
    status=$?
}

cyclone_exec() {
    timeout ${CPU_LIMIT} cyclone $1
    status=$?
}

gauche_exec() {
    timeout ${CPU_LIMIT} gosh -r7 -b $1
    status=$?
}

picrin_exec() {
    timeout ${CPU_LIMIT} picrin $1
    status=$?
}

gerbil_exec() {
    timeout ${CPU_LIMIT} gxi --lang r7rs $1
    status=$?
}

larceny_exec() {
    timeout ${CPU_LIMIT} larceny -r7rs -program $1 < /dev/null > /tmp/larceny.log 2>&1
    if grep 'Error: ' /tmp/larceny.log
    then
        status=1
    else
        status=0
    fi
}

kawa_exec() {
    timeout ${CPU_LIMIT} kawa $1 < /dev/null 2>&1
    status=$?
}

csi_exec() {
    timeout ${CPU_LIMIT} csi < $1 > /tmp/csi.log 2>&1
    if grep 'Error: ' /tmp/csi.log
    then
        status=1
    else
        status=0
    fi
}

mit_scheme_exec() {
    timeout ${CPU_LIMIT} mit-scheme < $1
    status=$?
}

guile_exec() {
    timeout ${CPU_LIMIT} ${GUILE} $1
    status=$?
}

chibi_exec() {
    timeout ${CPU_LIMIT} chibi-scheme < $1 > /tmp/chibi.log 2>&1
    if grep 'ERROR' /tmp/chibi.log
    then
        status=1
    else
        status=0
    fi
}

foment_exec() {
    timeout ${CPU_LIMIT} foment $1
    status=$?
}

chez_exec() {
    timeout ${CPU_LIMIT} chez-scheme --libdirs ~/scheme/chez < $1 > /tmp/chez.log 2>&1
    if grep 'ERROR' /tmp/chez.log
    then
        status=1
    else
        if grep 'Exception' /tmp/chez.log
        then
            status=1
        else
            status=0
        fi
    fi
}

sagittarius_exec() {
    timeout ${CPU_LIMIT} sagittarius -r7 $1
    status=$?
}

temp_dir=$(mktemp -d)

for pkg in input/*.scm
do
    echo "***** running package $pkg"
    csplit --quiet -f ${temp_dir}/cov -b '%03d.scm' $pkg '/;; TEST/' '{*}'
    p=$(basename $pkg .scm)
    package="("${p%%-*}" "${p#*-}")"
    if [ "$package" = "(scheme base)" ] ;
    then
        pkg=$package
    else
        pkg="(scheme base) $package"
    fi
    echo "(import $pkg)"
    for file in ${temp_dir}/cov*.scm
    do
        if [ -s $file ]
        then
            {
                tmpfile=$(mktemp)
                test=$(grep ';; TEST' $file | cut -f 3 -d\  )
                params=$(grep ';; TEST' $file | cut -f 4- -d\  )
                echo $pkg $test $params
                if [ -r preludes/$SCHEME_NAME.scm ]
                then
                    cat preludes/$SCHEME_NAME.scm >> $tmpfile
                fi
                echo "(import $pkg)" >> $tmpfile
                echo "(define (assert x) (unless x (error \"ERROR assertion failed\")))" >> $tmpfile
                if [ -r postludes/$SCHEME_NAME.scm ]
                then
                    cat postludes/$SCHEME_NAME.scm >> $tmpfile
                fi
                cat $file >> $tmpfile
                $SCHEME_EXE $tmpfile
                rm $tmpfile
            } >> $SCHEME_NAME.log 2>&1
            if [ $status == 0 ]; then
                state=OK
            else
                state=ERROR
            fi
            echo "$SCHEME_NAME,$SCHEME_VERSION,$package,$state,$test,$params" | tee -a errors.csv
        fi
    done
    rm $temp_dir/*.scm
done

#rm -Rf $temp_dir

# Local Variables:
# mode: sh
# End:
